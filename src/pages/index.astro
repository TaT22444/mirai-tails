---
import Layout from '../layouts/Layout.astro';
import ArticleList from '../components/ArticleList.astro';

import { getBlogs } from '../library/microcms';
const response = await getBlogs({
  fields: ["id", "title", "thumbnail", "tag", "publishedAt", "article_name", "article_summary", "article_link"]
});

import PanList from '../components/PanList.astro';

const paths = [
  { label: '未来洞察記事', url: '/' },
];
const articles = response.contents;
const hasArticles = articles.length > 0; // 記事があるかどうかを判定
---

<Layout 
  title="ミラテル"
  URL="https://miratel.netlify.app/"
  sns_img="../public/images/me.JPG"
  ogptitle="ミラテル | AI未来洞察"
  type="website"
  description="ミラテルはAIを使って未来予測を行う洞察サイトです。"
  paths={paths}
>
<div class="category">
	<p class="category-label">カテゴリー</p>
	<ul class="category-list">
		<li class="category-list-item">
			<button class="category-list-item-link">
				<p class="category-list-item-label">Technology</p>
			</button>
		</li>
		<li class="category-list-item">
			<button class="category-list-item-link">
				<p class="category-list-item-label">Society</p>
			</button>
		</li>
		<li class="category-list-item">
			<button class="category-list-item-link">
				<p class="category-list-item-label">Energy</p>
			</button>
		</li>
		<li class="category-list-item">
			<button class="category-list-item-link">
				<p class="category-list-item-label">Environment</p>
			</button>
		</li>
		<li class="category-list-item">
			<button class="category-list-item-link">
				<p class="category-list-item-label">Education</p>
			</button>
		</li>
		<li class="category-list-item">
			<button class="category-list-item-link">
				<p class="category-list-item-label">Economy</p>
			</button>
		</li>
	</ul>
</div>
<h2 class="search-word">新着記事</h2>
<ul class="filter-list">
	<li class="filter-list-item">
		<button class="filter-list-item-link active-filter">
			<p class="filter-list-item-label">追加日</p>
		</button>
	</li>
	<li class="filter-list-item">
		<button class="filter-list-item-link">
			<p class="filter-list-item-label">更新日</p>
		</button>
	</li>
	<li class="filter-list-item">
		<button class="filter-list-item-link">
			<p class="filter-list-item-label">コメント数</p>
		</button>
	</li>
</ul>
<div class="article">
	{hasArticles ? (
		<ArticleList {articles} />
	) : (
		<p class="no-articles-message">まだ記事はありません。</p>
	)}
</div>
</Layout>

<style lang="scss">
	.hero{
		width: 100%;
		background-color: #252528;
	}

	.title{
		font-size: 16px;
		font-weight: 500;
		color: #252528;

		@media screen and (max-width:834px) {
			font-size: 20px;
    }

		@media screen and (max-width:440px) {
			display: none;
    }
	}

	.category{
		width: 100%;
		margin-top: 16px;
		display: none;

		@media screen and (max-width:834px) {
			display: block;
			margin-top: 64px;
    }

		&-label{
			font-size: 14px;
			font-weight: 600;
			color:#252528;
		}

		&-list{
			margin-top: 8px;
			display: flex;
			align-items: center;
			flex-wrap: wrap;
			gap: 8px;

			&-item{

				&-link{
					padding: 8px 16px;
					border-radius: 100px;
					border: 1px solid #252528;

					@media screen and (max-width:440px) {
            padding: 6px 12px;
          }
				}

				&-label{
					font-size: 12px;
					font-weight: 600;
				}
			}
		}
	}

	.search-word{
		padding: 0 0 8px;
		font-size: 32px;
		font-weight: 600;
		color: #252528;

		@media screen and (max-width:440px) {
      padding: 24px 0 8px;
			font-size: 24px;
    }
	}

	.filter-list{
		// position: sticky;
		top: 24px;
		// display: flex;
		display: none;
		gap: 8px;

		// @media screen and (max-width:834px) {
		// 	display: flex;
		// 	top: 80px;
    // }

		&-item{
			margin-top: 0;
			cursor: pointer;

			@media screen and (max-width:834px) {
				// margin-top: 0;
      }

			>.active-filter{
			  border: 1px solid #252528;
		  }

			&-link{
				padding: 8px 16px;
			  border-radius: 100px;

				@media screen and (max-width:440px) {
          padding: 6px 12px;
        }
			}

			&-label{
				font-size: 12px;
				font-weight: 500;   
			}
		}
	}

	.article{
		margin-top: 8px;
		width: 100%;

		@media screen and (max-width:834px) {
			// margin-top: 16px;
    }

		&-list{
			display: flex;
			flex-wrap: wrap;
			column-gap: 24px;
			row-gap: 32px;

			@media screen and (max-width:834px) {
        width: 100%;
      }

			@media screen and (max-width:440px) {
        row-gap: 16px;
      }
		}

		&-item{
			width: calc((100% - 88px) / 3);

			@media screen and (max-width:1512px) {
        width: calc((100% - 64px) / 2);
      }

			@media screen and (max-width:834px) {
        width: calc((100% - 24px) / 2);
      }

			@media screen and (max-width:440px) {
        width: 100%;
      }

			// @media screen and (max-width:1120) {
      //   width: calc((100% - 64px) / 2);
      // }

			&-link{
				display: block;
			}

			&-img{
				width: 100%;
				aspect-ratio: 16/9;
				object-fit: cover;
				border-radius: 4px;
			}

			&-tagList{
				display: flex;
				gap: 16px;
				margin-top: 8px;

				&-item{
					font-size: 12px;
					font-weight: bold;
					color: #252528;
				}
			}

			&-title{
				font-size: 20px;
				font-weight: 500;
				color: #252528;
				margin-top: 8px;

				@media screen and (max-width:440px) {
          font-size: 20px;
        }
			}

			&-footer{
				display: flex;
				justify-content: space-between;
				align-items: center;
				margin-top: 8px;
			}

			&-iconList{
				display: flex;
				align-items: center;
				gap: 16px;

				&-item{
					display: flex;
					gap: 4px;
					align-items: center;

					&-sum{
						font-size: 12px;
						font-weight: 500;
						color: #636366;
					}
				}
			}

			&-timestamp{

				&-label{
					font-size: 12px;
					font-weight: 400;
					color: #636366;
				}
			}
		}
	}

	.box{
		width: 380px;
		border-radius: 32px;
		border: 1px solid #252528;
		margin-inline: auto;
	}

	.r-container{
		position: relative;
		top: 104px;
		overflow: hidden;
		width: 100%;
		max-width: 280px;
		// margin-left: auto;
		// margin-right: 10px;

		@media screen and (max-width:1120px) {
      max-width: calc(100% - 24px);
			// margin-right: 24px;
    }

		@media screen and (max-width:834px) {
      max-width: 100%;
			// margin-right: 24px;
    }
		
	}

	.r-inner{
		display: flex;
		flex-direction: column;
		gap: 40px;
		// align-items: center;
	}

	.r-box{
		width: 100%;
		display: flex;
		flex-direction: column;
	}

	.r-box-label{
		font-size: 14px;
		font-weight: 600;
		color: #252528;
	}

	.r-box-list{
		margin-top: 16px;
		display: flex;
		flex-direction: column;
		gap: 16px;

		&-item{
			width: 100%;

			&-link{
				display: flex;
				gap: 12px;
			}

			&-img{
				width: 40%;
				// height: 120px;
				aspect-ratio: 1/1;
				object-fit: cover;
				border-radius: 4px;

				@media screen and (max-width:1120px) {
          width: 160px;
					aspect-ratio: 16/9;
        }
			}

			&-title{
				font-size: 12px;
				font-weight: 600;
				color: #252528;
				padding: 4px 0;
				letter-spacing: .05em;

				@media screen and (max-width:1120px) {
          font-size: 14px;
        }
			}
		}
	}
	.no-articles-message {
  color: #d3d3d3;
}
</style>

<script type="module">
  document.addEventListener('DOMContentLoaded', () => {
  const tagButtons = document.querySelectorAll('.header-aside-tagList-item-link');
  const articles = document.querySelectorAll('.article-item');
  const searchWordElement = document.querySelector('.search-word');
  const noArticlesMessage = document.createElement('p'); // 記事がない場合のメッセージ
  noArticlesMessage.classList.add('no-articles-message');
  noArticlesMessage.textContent = 'まだ記事はありません。';
  document.querySelector('.article').appendChild(noArticlesMessage);

  const showMoreButton = document.getElementById('show-more-button');
  let visibleCount = 6; // 初期表示数
  let currentTag = ''; // 現在選択されているタグ

  /**
   * 指定されたタグに基づいて記事を更新する関数
   */
  const updateArticles = (tag) => {
    let hasVisibleArticles = false;
    let displayedArticles = 0;

    articles.forEach((article) => {
      const articleTag = article.getAttribute('data-tag');
      const matchesTag = tag === '' || articleTag === tag;

      // 該当する記事が表示されるべきか判定
      if (matchesTag && displayedArticles < visibleCount) {
        article.style.display = 'block';
        hasVisibleArticles = true;
        displayedArticles++;
      } else {
        article.style.display = 'none';
      }
    });

    // 「まだ記事はありません」メッセージの表示
    noArticlesMessage.style.display = hasVisibleArticles ? 'none' : 'block';

    // 「もっと見る」ボタンの表示制御
    const totalMatchingArticles = Array.from(articles).filter(article =>
      tag === '' || article.getAttribute('data-tag') === tag
    ).length;
    showMoreButton.style.display = displayedArticles < totalMatchingArticles ? 'block' : 'none';

    // 検索ワードの更新
    searchWordElement.textContent = tag ? `${tag}` : '新着記事';
  };

  /**
   * URLからタグを取得して記事をフィルタリング
   */
  const initializeFromURL = () => {
    const urlParams = new URLSearchParams(window.location.search);
    currentTag = urlParams.get('tag') || ''; // タグがない場合は空文字
    visibleCount = 6; // 表示件数をリセット
    updateArticles(currentTag);
  };

  // タグボタンのクリックイベント
  tagButtons.forEach((button) => {
    button.addEventListener('click', () => {
      currentTag = button.getAttribute('data-tag') || ''; // 選択されたタグを取得
      const newUrl = `${window.location.pathname}?tag=${encodeURIComponent(currentTag)}`;
      window.history.pushState({}, '', newUrl); // URLを更新
      visibleCount = 6; // 表示件数をリセット
      updateArticles(currentTag);
    });
  });

  // 「もっと見る」ボタンのクリックイベント
  if (showMoreButton) {
    showMoreButton.addEventListener('click', () => {
      visibleCount += 6; // 6件ずつ追加表示
      updateArticles(currentTag);
    });
  }

  // 初期表示の設定
  initializeFromURL();

  // popstateイベントでブラウザの戻る/進むに対応
  window.addEventListener('popstate', initializeFromURL);
});

</script>
